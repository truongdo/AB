(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Field f_method_x does not belong to the table"
p3
sS'layer'
p4
S'/var/www/web2py/applications/AB/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\nimport myutils\nfrom gluon.sql import Row\nfrom gluon.debug import dbg\ndb_helper = myutils.DbHelper(db)\n\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\ndef index():\n    form = SQLFORM(db.t_subject)\n    if form.validate():\n        form.vars.id = db.t_subject.insert(**dict(form.vars))\n        redirect(URL(\'default\',\'test_list\', vars=dict(user_id=form.vars.id)))\n\n    utt_fetcher = db_helper.mk_fetcher()\n    utt_records = utt_fetcher(db.t_subject.ALL)\n    list_user = [(row.id, row.f_name, row.f_age) for row in utt_records]\n    \n    table_rows = []\n    for user_id, name, age in list_user:\n        table_rows.append(TR(MARKMIN("[[User - %s %s %s]]"\n                                %(name, age, URL(\'default\', \'test_list\', vars=dict(user_id=user_id))))))\n    html = TABLE(\n            *table_rows\n    )\n\n    \n    return dict(form=form, html=html)\n\ndef error():\n    return dict()\n\n@auth.requires_login()\ndef data_manage():\n    check_del(request.vars, db.t_data)\n    check_update("t_data")\n    form = SQLFORM.smartgrid(db.t_data,onupdate=auth.archive)\n    return dict(form=form, batch_add=gen_form("t_data"))\n\n    # form = SQLFORM.smartgrid(db.t_data,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef result_manage():\n    check_del(request.vars, db.t_result)\n    form = SQLFORM.smartgrid(db.t_result,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef user_manage():\n    check_del(request.vars, db.t_subject)\n    form = SQLFORM.smartgrid(db.t_subject,onupdate=auth.archive)\n    return locals()\n\ndef test_list():\n    utt_fetcher = db_helper.mk_fetcher()\n    utt_records = utt_fetcher(db.t_data.f_test_set_id)\n    list_test_set = sorted(set([row.f_test_set_id for row in utt_records]))\n    \n    table_rows = []\n    for test_name in list_test_set:\n        table_rows.append(TR(MARKMIN("[[Test set - %s %s]]"\n                                %(test_name, URL(\'eval\', \'index\', args=[0], vars=dict(user_id=request.vars.user_id, test_set=test_name))))))\n    html = TABLE(\n            *table_rows\n    )\n\n    return dict(html=html)\n\ndef check_del(keys, table):\n    if ("del_table"):\n        if "del_table" in request.vars:\n            del_table(table)\n\ndef del_table(table):\n    table.truncate()\n\ndef check_update(table_name):\n    if table_name in request.vars:\n        for d in iter_data(request.vars[table_name]):\n            if table_name == "t_data":\n                update_record(d)\n\ndef update_record(d):\n    parts = d.strip().split("|")\n    if len(parts) < 7:\n        return 0\n\n    if len(parts) == 7:\n        record_id = db.t_data.insert(f_name=parts[0], f_test_set_id=parts[1],\\\n            f_text=parts[2], \\\n            f_audio_path_1=parts[3], f_method_1=parts[4],\n            f_audio_path_2=parts[5], f_method_2=parts[6],\n            )\n    elif len(parts) == 9:\n        record_id = db.t_data.insert(f_name=parts[0], f_test_set_id=parts[1],\\\n            f_text=parts[2], \\\n            f_audio_path_1=parts[3], f_method_1=parts[4],\n            f_audio_path_2=parts[5], f_method_2=parts[6],\n            f_audio_path_x=parts[7], f_method_x=parts[8],\n            )\n\n    return record_id\n\ndef gen_form(table_name):\n    if table_name == "t_data":\n        hint = "utt_name|test_set_id|text|audio_path_1|method1|audio_path2|method2[|audio_path3|reference]"\n    form = XML(INPUT(_type="button",_value="Batch add",_id="toggle_btn")+\\\n               FORM(TEXTAREA(_type="text",_name=table_name,_placeholder=hint),INPUT(_type="submit",_value="Submit"), _id="add_form"))\n    return form\n\ndef iter_data(data):\n    for line in data.split("\\n"):\n        line = line.strip()\n        if line != "":\n            yield line\n\nresponse._vars=response._caller(data_manage)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/var/www/web2py/applications/AB/controllers/default.py", line 121, in <module>\n  File "/var/www/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/www/web2py/gluon/tools.py", line 3444, in f\n    return action(*a, **b)\n  File "/var/www/web2py/applications/AB/controllers/default.py", line 39, in data_manage\n    check_update("t_data")\n  File "/var/www/web2py/applications/AB/controllers/default.py", line 85, in check_update\n    update_record(d)\n  File "/var/www/web2py/applications/AB/controllers/default.py", line 103, in update_record\n    f_audio_path_x=parts[7], f_method_x=parts[8],\n  File "/var/www/web2py/gluon/dal/objects.py", line 724, in insert\n    ret =  self._db._adapter.insert(self, self._listify(fields))\n  File "/var/www/web2py/gluon/dal/objects.py", line 644, in _listify\n    \'Field %s does not belong to the table\' % name)\nSyntaxError: Field f_method_x does not belong to the table\n'
p11
s.